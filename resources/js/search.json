[[{"l":"Who we are","p":["… for the use and development of the Internet Computer and related technologies. It pursues activities such as","\uD83C\uDFD8️ community organization","\uD83D\uDCB0 funding","\uD83D\uDCD6 educational resources","\uD83D\uDD2C scientific discovery","conferences","developer funding","educational material development","educational symposiums","ICDevs.org (registered as The Internet Computer Developers Education and Discovery Corporation) is a 501(c)3 Texas Non-profit.","ICDevs.org is completely independent from the DFINITY Foundation and the ICA. Our goal is to further diversify and decentralize the Internet Computer ecosystem. By providing a United States-based non-profit organization we open up new, tax-advantaged ways, for US-based proponents of the Internet Computer to organize their resources and influence to advance the Ideals of the Internet Computer.","ICDevs.org seeks to provide the general public with","Meet our Board and Advisors","Meet our Developer Advisory Committee","open-source systems funding","Read our Bylaws","scientific and technology development","strategic community organization"]},{"i":"what-is-the-internet-computer","l":"♾️ What is the Internet Computer","p":["From : Dfinity docs","The Internet Computer is a blockchain that enables developers, organizations, and entrepreneurs to build and deploy secure, autonomous, and tamper-proof software programs.","As an application developer, you might find it useful to think of the Internet Computer as providing the following key elements:","An open communication protocol that enables general-purpose computations to run transparently directly on the internet A network that runs the protocol to provide computing capacity—for example, the hardware, CPU, and memory required to run programs—through independent data centers. A globally-accessible and scalable blockchain platform for running software applications.","ICDevs.org believes in a future where a significant portion of enterprise and consumer information management and commerces occurs with the Internet Computer involved. Our goal is that most people will be using the Internet Computer without knowing that they are doing so. To reach this goal we need a significant number of well-trained and well-equipped developers to build the infrastructure that seamlessly melds real-world activity into trustless computing infrastructure.","Places to learn more:","Dfinity IC Community Start Developing"]}],[{"l":"Basics"},{"i":"install---create---run","l":"Install - Create - Run","p":["Install SDK","Get version","Create a new project","Start local network - the flag is for running on background","Stop local network","Upgrade dfx version","Get Candid uri ulr"]}],[{"l":"Getting to know the motoko playground","p":["Motoko playground is a simple web interface that allows you to write and deploy motoko code in your web browser. It is a #1 choice for developers that just have started getting to know about the Internet Computer ecosystem and want to learn motoko programing language.","Motoko is a programing language developed natively for the Internet Computer blockchain. If you want to learn more about Motoko, visit the documentation page."]},{"l":"Start first project","p":["You can easily open Motoko playground by visiting this link https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/","Create a new project","You should see a modal window simmilar to the screen above that is basically giving you three options:","Create a new blank project","Open one of the pre-prepared projects","Import code from public Github repo","If you want to start coding from scratch, clicking on New Motoko project is the best option for you. In this tutorial, let's click on the Counter example so we can demonstrate how to use the playground.","This will get you the a Readme file that describes the project and presents how to deploy the code locally on your computer. As Motoko playground is working in the browser, you don't need to set up your local development enviroment and install the SKD now. Skip this and just click to the Main.mo file on the left hand side. This will bring you to the code.","Counter example code","This is how your workspace looks. On the left, you can manage files in your project, load packages and other canisters (smart contracts). In the bottom is a little console that shows you logs, this is where you look for error messagess when deploying. In the top right there is a Deploy button that we will use for deploying and testing our code."]},{"l":"Deploy your code","p":["Counter example is a very simple project to start with. Explaining the code in detail is above the scope of this tutorial but we will briefly go through it just to see what we can expect.","The actor has a stable variable counter, that will store the number of the counter and 3 public funcitons – get, set and inc. These functions form a public interface of our canister and we will see them in the generated Candid interface after deploy.","Candid is an IDL (interface definition language) developed for the IC ecosystem in order to facilitate communication between services written in different programing languages. You can read more about it here.","Motoko playground not only allows you to write and deploy your code, it also generates a Candid UI so you can test the functionality. Click on the deploy button to see it in action.","Deploying the project","First, you need to confirm the deploy by selecting a canister name and set up a garbage collector strategy. You can keep the settings as it is for now and click Install. You should see a success message in the console log.","Motoko Playground is really deploying your canister to the network. As it serves for educational and testing purposes only, there are some limitations such as only 1 GB of data can be used and the canister will expier after 20 minutes. Using this playground is very convinient for new devs learning Motoko, as you don't have to pay for cycles fees for deployment, which you would need to do when deploying to the mainnet directly."]},{"l":"Experiment with Candid UI","p":["If your project deployed successfully, you now should see a Candid UI on your right-hand side.","Candind UI","As we mentioned above, Candid UI follows the interface defined in your Motoko code. You should see a form consisting of three functions get, inc and set. Function get and inc is not expecting any argument so you can click on Query or Call button and experiment with it. Function set is expecting a natural number (Nat) that you can pass in the input field.","You will notice that query functions have very fast execution usually in terms of miliseconds. On the other hand, functions calling an update usually takes about 2 seconds."]},{"l":"Update your code","p":["Once you start practicing Motoko, you will want to update your code frequently. Just click on the Deploy button again, it is going to ask you if you want to Upgrade or Reinstall the code. If you choose update, the stable memory will stay. On the opposite, reinstalling canister will refresh the memory.","If you make significant changes to the code, you might get notified that the update will not be compatible with the previous version and the playground makes you reinstall the whole canister.","Let's make an easy exercise right now. Try to update your code with a new function dec, that will decrease the counter of 1 each time. Remember, the counter should not go below zero."]},{"l":"Import a module","p":["To import a module from Motoko base library, you can do it like that:","Now you have available all of the functions that are present in the Nat module that you can find on the official documentation page https://smartcontracts.org/docs/base-libraries/Nat.html. Notice, that there are also other modules available.","Now, lets make a function is_zero, that will return true if the counter value is zero or false if it's not a zero. Use a function imported from Nat module.","Viola, here is the whole working code in case you got lost. You can copy paste it to your playground."]},{"i":"save--share-your-code","l":"Save & share your code","p":["You know might want to save your code so you can open it later. You can either save the code and keep in in a local file or click on the Save & Share button in the top-right corner. This will generate you an unique link that you can come back to later."]},{"l":"Useful resources and links","p":["If you want to experiment with more exapmles of Motoko code. You can again click on the Open tutorial button in the top right corner. More examples can be found in this GitHub repo which was made by Dfinity foundation. Lastly, there is a no-code Motoko editor Blocks which contains some examples too and the Build & Run button will deploy your code via Motoko Playground as well.","Medium article a Yan Chen from Dfinity Foundation about Motoko Playground: https://medium.com/dfinity/introducing-the-motoko-playground-an-online-development-environment-for-the-internet-computer-efb4cd09ea8b","Community converstaion from Dfinity also with Yan Chen about Motoko Playground: https://www.youtube.com/watch?v=A_RbxhN0BHI","Link to a Motoko documentation page: https://smartcontracts.org/docs/language-guide/motoko.html"]}],[{"l":"Primitive data types","p":["Types play a significant role in Motoko language. Compared to modern general purpose languages such as Python, Motoko is very strict about types. This have a good purpose as it helps preventing Motoko programs to go wrong as mentioned in the documentation page.","For example, each variable in a Motoko program carries an associated type, and this type is known statically, before the program executes. Each use of each variable is checked by the compiler to prevent runtime type errors, including null reference errors, invalid field access and the like."]},{"l":"Types in Motoko","p":["Generaly speaking, we can categorize types into two groups: primitive types non-primitive values. This text focuses on primitive types mainly so we will explain them in more detail in the next chapture. To give you the contrast, let's quickly go through the primitive vs non-primitive values.","Primitive types in Motoko programming language are integers, natural numbers floating numbers, characters, texts and booleans.","Example of a primitive type, declaration of a variable that will have type of a natural number an is initialized with the value of 1:","Non-primitive values can be tuples, arrays, objects, variants, functions, async values or error values.","Example of a non-primitive type, declaring an array that b that can only contain natural numbers and is initialized with values 1, 2, 3:","You can easily experiment with types and run this sample code in the Motoko playground if you are not familiar with it you can follow Getting to know Motoko Playground tutorial."]},{"l":"Primitive types","p":["In this chapter, we will go through all of the primitive types and give you examples of how to declare variables and what can be assigned to them."]},{"l":"1. Unbounded Integers","p":["Unbounded integers can be assigned with positive or negative numbers. There are some ways how to declare an integer variable:","Let's make a little exercise now. Write a funciton called add, that will take two integers as arguments and return a sum of these two numbers.","That was quite easy, right? Try to experiment with it in the Candid UI."]},{"l":"2. Unbounded Natural numbers","p":["Unbounded natural numbers can be assigned with positive numbers only. Motoko program will trap if you try to assign a negative number."]},{"l":"3. Bounded numbers","p":["As integers can also go below zero, we have space for 256 numbers too but in the range from -128 to 127.","But if you try this your program will fail because we are overflowing the maximum value:","For Nat16 the maximum value that can be assigned is 65 535 (2^ 16) and for Int16 we have minimum –32768 and maximum –32767. The same logic applies for 32 and 64 size of a type. This gives you understanding of what value can be assigned to a variable of specific type and gives you freedom to decide which one to use when designing your own program.","If you try to run this program, it will trap. Motoko Playground is well prepared for this type of situations, it doesn't let you execute the program and shows you an explanatory error message:","In Motoko, these bounded numbers types are available:","Int16","Int32","Int64","Int8","Keep in mind, even if you have a value that would fit into a smaller size Nat/Int, you can only assign it if it has the same type. Something like this will not work in Motoko:","Nat16","Nat32","Nat64","Nat8","Overflowing the Nat8 value in Motoko Playground","This means that you can declare a variable:","To explain the pattern, each type consist of Nat/Int and a number. This number represents quantity of bits that will be assigned in memory of the computer for this specific type. For example Nat8 variable can be only assigned with values ranging from 0 to 255. This comes from a formula 2^ 8 = 256 so the maximum number is 255 as we are starting from 0.","Unbounded numbers variables can be assigned theoretically with numbers of any size. There are situations when you don't need this. For example if you want to declare a variable that will represent an age of a person. This variable should never exceed a number greater than 200. You might consider to use a bounded variable to be more memory effective."]},{"l":"4. Floating point numbers","p":["For decimal numbers Float type is available in Motoko. Here are some ways how to assign a value to declared float variable:"]},{"l":"5. Characters and text","p":["For single characters, there is a type called Char and for strings of characters a Text type. Be careful, char type must be assigned with single quotes and string types with double qoutes. Lets try to declare your own variables:","Let's create a funciton concat, that will take two strings a and b as arguments and will return a concatenated text of them both with a single space between them.","Exactly, you can use the # operator to concatenate strings in Motoko!"]},{"l":"6. Booleans","p":["For booleans we have a Bool type in Motoko. It can only hold a value either true or false."]},{"l":"Useful resources and links","p":["Motoko documentaion page talking about types: https://smartcontracts.org/docs/languages/motoko-at-a-glance.html#_primitive_types","Motoko basic concepts and terms: https://smartcontracts.org/docs/language-guide/basic-concepts.html#intro-values","Motoko base library: https://smartcontracts.org/docs/base-libraries/stdlib-intro.html"]}],[{"l":"Understanding types","p":["Now that we learned about primitive types in the previous lecture, let's move on to non-primitive types. In this tutorial, we are going to demonstrate how to declare them and build them with primitive types.","This is a natural process as non-primitive values can be user-defined, meaning that you can build objects or structures that combines multiple primitive types together."]},{"l":"Non-primitive types","p":["Let's quickly go through non-primitive types that are present in Motoko and how to declare them."]},{"l":"1. Tuples","p":["Tuples are simple objects that can contain multiple elements. These elements can be different types but you can't change number of elements after you declare it. You could create a simple tuple type to store name and surname for a person:","Then, you could easily create a tuple that will store not only name but also an age of the person as you can mix different types in a tuple:","However, for more complex situations you should consider creating your own object with named parameters which would be more readable. Tuples are usually used for simple use cases only."]},{"l":"2. Arrays","p":["Arrays are used for storing multiple values. Unlike tuples, they can contain only one specific type. You can define mutable and immutable arrays. The difference is that mutable arrays can be updated and immutable arrays cannot."]},{"i":"21-immutable-arrays","l":"2.1 Immutable arrays","p":["Here is how you define an immutable array:","Now as we defined an immutable array with the type of text, Motoko playground will not let you include any other value than text, also it doesn't let you to update the value:","Let's make a first excersise. Try to write a function called getDay, that will take a Nat as an argument and returns a name of the corresponding day.","Here we go. That was simple. You can notice 2 things – function is very well defined with types in the input as well as in the output, if you try to put anything else then natural number it is not going to work.","Also, we are using the query keyword in the function declaration which will make the function execution much faster. It is a very good idea to use query function anytime we are not trying to update values in the backend of our app."]},{"i":"21-mutable-arrays","l":"2.1 Mutable arrays","p":["Declaration of a mutable array is very similar to immutable array. The key difference is using the var keyword. Let's try to declare an immutable array.","Notice that now Motoko Playground allows you to reassign the array with different values. For example:","You could also change the number of elements inside freely. However, you still can't change an element inside individually as only the whole array is mutable but the content inside is not:","If you woul like to make a totally mutable array, you need to use the var keyword also inside the declaration. Here is the full working code of a mutable array:","If you run this code in you Motoko Playground and try tu run the function in the Candid UI, you should get \"Sunday\" for the index of 0.","If you'd like to make immutable array mutable and vice versa, you need to use functions from the Array section of the Motoko base library. Specifically it is thaw function to make array mutable and freeze function to make it immutable.","Notice that after using the thaw function, we can assign another array to the variable or even assign a value to a specific index. This wouldn't be possible with immutable array."]},{"l":"3. Records","p":["In Motoko, similarly to arrays, records objects can be mutable and immutable. Here is how you define an immutable object Person with attributes name, surname and age:","Analogically, if you want to have your object type mutable, you should use the var keyword. Let's redesign the example above so we are able to update the age of a person, name and surname cannot be changed:"]},{"l":"4. Variants","p":["When declaring an object above, we have to define all of the parameters so we have a person that has name AND surname AND age. Variants perform more like OR as we are expecting to get one of the values inside. Let's create a variant type Status that will have options single, married and divorced.","Now let's update the Person record type that we created before and add status as another parameter. We expect the status parameter to be updated later on in time.","With this design, we assured that each person can only have one of the available statuses."]},{"l":"5. Functions","p":["We've been already messing around simple functions in this and previous tutorials so you probably know how to define them. Let's go through some more examples so you can recognize different types of functions in Motoko."]},{"l":"Public and private functions","p":["Most of the functions that we defined so far were public, as there was no specific reason to make them private. Private functions are used for specific situations when you don't want to expose the private function to the public interface of your canister.","Example of a public function in Motoko, using the keyword public before the function definition:","If you would like to make your function private, you use the private keyword. You will notice that private functions also have an _ underscore character in their names. This is not required by the language itself but recommended as a naming convention."]},{"l":"Functions from Motoko base library","p":["Like we presented in the array section, there is plenty of functions available in the Motoko base library. There is a section for each type. These functions are called from the imported module like we did with the thaw function:","Notice that some functions require to define the data type in the <> brackets.","Go through the base library and check what is inside for each type. These funcitons are going to save your time when writing your programs. However, please respect that Motoko is still quite a fresh language and there is not yet as many functions available as for more mature languages."]},{"l":"Anonymous functions","p":["Anonymous functions are also known as lambdas. You define them for generic purpose in your program to complete small tasks. They are not ment to be part of the public interface."]},{"l":"6. Async values","p":["When canisters or actors communicate with each other on the Internet Computer, it happens asynchronously. Messagess are processed one after another (in sequence) in an isolated way.","Let's have a look at an example from the documentation page:","Await keyword is used to say to our program that we are expecting a value from the other service but the value will be returned in the future, that is why we have to wait for it. After the future value is assigned to our variables result1 and result2 the program knows that it can call the finalStep function."]},{"l":"7. Optional values","p":["Optional values are used when we are expecting a specific type but it can be null as well. Optional values are defined with question mark and can be mostly found in the record type declaration or in functions.","Let's extend the Person model from above and add another parameter partner that will point to another person instance. Naturally, single persons will not have a partner so we must keep this parameter optional.","Optional values play significant roles also in function definitions as funciton can as well expect or return a null value. There will be more detailed tutorial on that soon."]},{"l":"Useful links and resources","p":["Motoko Bootcamp video about variables, functions and types by Albert Du https://www.youtube.com/watch?v=4YX41Nm7Wx8","Motoko Bootcamp video about variants by Paul Young https://www.youtube.com/watch?v=GFenqSGhj7I&"]}],[{"l":"Serving simple SVG over HTTP","p":["In this tutorial, things are going to get more excited. We are going to learn how to serve a SVG image over HTTP(s) directly from your canister. Yes – canisters can serve web content over HTTP! You are probably familiar with that as it is one of the main advantages of the Internet Computer over the other blockchains. But there is also a http_request() function that you can use in Motoko to define how exactly is your canister going to behave when contacted over HTTP protocol.","This could be useful when you want to serve custom SVG images or define custom api endpoint over the URL. Serving a dynamic NFT file is what we're going to do now.","We are going to use Motoko Playground for deploying the code, this will give you a quick start without needing to setting up your local enviroment."]},{"l":"HTTP Requests","p":["We are going to start with this skeleton template used for educational purposes during the Motoko Bootcamp event.","The template contains of two files, first the module file http.mo that contains types needed for HTTP communication from the canister.","If the code seems too exotic to you, please check this video that is explaining basics of HTTP protocol. The most key part for our case in this tutorial are the Request and Response types that play the main role in our simple HTTP communication.","The second file is your main.mo file that loads the module http and contains a simple function http_request that puts it all together.","Now, try to deploy the code in the Motoko Playground. Let's ignore the Candid UI for now and focus on the Log message with the canister ID: Code installed at canister id wch4f-miaaa-aaaab-qadfa-cai. Your canister ID will be of course different. Copy your canister ID and create this URL following this pattern https://<<CANISTER ID>>.raw.ic0.app/:","If all goes fine and you open your URL in your browser you should see the Hello world message.","Notice that there is a \"raw\" keyword in the URL. Raw in the URL means we are serving non certified assets. This certification means that IC guarantees that you are getting right data. Certification can be expensive as it can cost a lot of assets so it only makes sense when serving very important data. You would need to implement a hash function for certification which is beyond the scope of this tutorial."]},{"l":"SVG image","p":["Now, let's put some SVG image into works. SVGs are basically text files that carry vector information about some visual. You can easily find any SVG file online and use it or you can use the same as we. Create a text variable called svg that will contain data about your curve.","In order to display the SVG, we need to replace this line of code in our http_request function body = Text.encodeUtf8(\"Hello world\"); with the svg variable:","You could also adjust the header format of the return type if you want to be precise, but it will work with text/html as well.","Now if you deploy your code and try to refresh your canister page again in the browser, you should see the SVG image instead of Hello, World message. Beautifull infinity symbol.","SVG infinity symbol from the canister","Here we go! You just served a SVG file over HTTP on the Internet Computer."]},{"l":"Dynamic SVG","p":["To demonstrate the power of serving SVG images over HTTP, we can now make a simple example of dynamically changing the SVG color.","Notice that there is a color definition at the beginning of our curve (path) in the SVG format fill=' black'. We can make this to change dynamically based on the number in the URL requested to the canister.","To start, let's create an array that will contain some colors:","Now, let's define a function make_svg that will take a color as a text argument and returns colored SVG if it finds it in our colors array. If it doesn't find the color in our array, it will return the default black color.","We are first looping through our colors array to find out if color is in it. If it is found we assign it as a result_color, if it is not inside we will use \"black\" as default. Notice that we are contatenating the SVG string with the color name.","Now let's change the http_request() function, so it gets the /path from the request and call the color_svg function, that will return the SVG code with the right color.","Now deploy your code and open the canister URL in another window of your browser again. Include the NFT color behind the URL so it looks like this (remember to use your own canister ID from the log console):","SVG rendered with specific color","Try to put something else than registered color name in the URL, you should see the default black symbol.","Here is the full working code in the Motoko Playground in case you got lost somewhere.","Main.mo","http.mo","Imagine what you can do with SVG files now, you have unlimited possibilities as this format is completely extendable or customizable. You can create more curves and layers, make interactions etc."]},{"l":"Useful resources and links","p":["Austin Fatheree presenting HTTP requests for Motoko Bootcamp https://www.youtube.com/watch?v=gaVuMaTP2lQ","Basics of HTTP communication https://www.youtube.com/watch?v=iYM2zFP3Zn0","Documentation page regarding canisters to respond HTTP requests https://smartcontracts.org/docs/http-middleware.html#_enabling_canisters_to_respond_to_http_requests","Motoko example HTTP counter from Dfinity https://github.com/dfinity/examples/blob/master/motoko/http_counter/src/main.mo"]}],[{"l":"How To Contribute","p":["Follow these basic steps to add tutorials and contribute:","Clone our docs repo git clone git@github.com:icdevs/ic_devs_org_tutorials.git","Navigate to the cloned repo root directory","Install Retype(this is a great open source tool that helped us to create these docs) npm install retypeapp --global","Run the site locally retype watch","Create a new tutorial","Create a file under the tutorials folder (i.e. 'motoko-basics.md')","Write the tutorial in Markdown ( Formatting rules)","Create a PR","That is it. Once we review the changes we will merge with our main branch and your tutorial will be live \uD83D\uDE80 \uD83D\uDE80 \uD83D\uDE80"]},{"i":"happy-coding","l":"Happy coding!!!"}]]